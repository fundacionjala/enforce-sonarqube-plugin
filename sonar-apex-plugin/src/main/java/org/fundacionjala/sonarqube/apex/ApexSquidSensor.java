package org.fundacionjala.sonarqube.apex;import org.fundacionjala.sonarqube.apex.api.Apex;import org.sonar.api.batch.fs.FilePredicate;import org.sonar.api.batch.fs.FileSystem;import org.sonar.api.batch.fs.InputFile;import org.sonar.api.batch.rule.CheckFactory;import org.sonar.api.batch.sensor.Sensor;import org.sonar.api.batch.sensor.SensorContext;import org.sonar.api.batch.sensor.SensorDescriptor;import org.sonar.api.internal.google.common.collect.Lists;import org.sonar.api.issue.NoSonarFilter;import java.io.File;import java.util.List;public class ApexSquidSensor implements Sensor {    private final Apex apex;    private final SonarComponents sonarComponents;    private final NoSonarFilter noSonarFilter;    private FileSystem fileSystem;    private FilePredicate filePredicate;    public ApexSquidSensor(Apex apex, CheckFactory checkFactory, NoSonarFilter noSonarFilter, SonarComponents sonarComponents) {        this.apex = apex;        this.sonarComponents = sonarComponents;        this.noSonarFilter = noSonarFilter;    }    /**     * Populate {@link SensorDescriptor} of this sensor.     *     * @param descriptor Describe what a Sensor is doing. Information may be used     *                   by the platform to log interesting information or     *                   perform some optimization.     */    public void describe(SensorDescriptor descriptor) {        descriptor.onlyOnLanguage(Apex.KEY).name("ApexSquidSensor");    }    /**     * The actual sensor code.     *     * @param context     */    public void execute(SensorContext context) {        sonarComponents.setContext(context);        fileSystem = context.fileSystem();        filePredicate = context.fileSystem().predicates().and(                fileSystem.predicates().hasType(InputFile.Type.MAIN),                fileSystem.predicates().hasLanguage(Apex.KEY));        List<File> inputFiles = Lists.newArrayList(fileSystem.baseDir());        //Analyzer which will scan the files.        ApexSquid squid = new ApexSquid(sonarComponents, context, sonarComponents.getChecks());        squid.scanFiles(inputFiles);    }}